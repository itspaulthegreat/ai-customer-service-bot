    async getOrderItemDetails(userId, orderId, productId) {
        try {
            console.log(`[OrderService.getOrderItemDetails] Fetching details for userId=${userId}, orderId=${orderId}, productId=${productId}`);

            if (!userId || !orderId || !productId) {
                console.error('[OrderService.getOrderItemDetails] Error: Missing required parameters');
                return {
                    success: false,
                    metric_value: [],
                    error: 'User ID, order ID, and product ID are required',
                    code: 'MISSING_PARAMETER',
                    context: { type: "order_item_details", orderId, productId }
                };
            }

            // Verify the order belongs to the user
            const orderQuery = wixData.query("Orders")
                .eq("_id", orderId)
                .eq("userId", userId)
                .find();

            const orderResult = await orderQuery;
            if (orderResult.items.length === 0) {
                console.error(`[OrderService.getOrderItemDetails] Order ${orderId} not found or access denied`);
                return {
                    success: false,
                    metric_value: [],
                    error: 'Order not found or access denied',
                    code: 'NOT_FOUND',
                    context: { type: "order_item_details", orderId, productId }
                };
            }

            // Fetch the specific order item
            const orderItemQuery = wixData.query("OrderItems")
                .eq("orderId", orderId)
                .eq("catalogItemId", productId)
                .find();

            const orderItemResult = await orderItemQuery;
            if (orderItemResult.items.length === 0) {
                console.error(`[OrderService.getOrderItemDetails] Order item not found for orderId=${orderId}, productId=${productId}`);
                return {
                    success: false,
                    metric_value: [],
                    error: 'Order item not found',
                    code: 'NOT_FOUND',
                    context: { type: "order_item_details", orderId, productId }
                };
            }

            const item = orderItemResult.items[0];

            // Fetch product details
            const productResult = await wixData.query("allProducts")
                .eq("_id", productId)
                .find();

            const productData = productResult.items.length > 0 ? productResult.items[0] : null;

            // // Fetch review data if applicable
            // let review = null;
            // if (item.shipmentStatus === 'Delivered') {
            //     const reviewResult = await getUserProductOrderReview(userId, productId, orderId);
            //     if (reviewResult.success && reviewResult.review) {
            //         review = reviewResult.review;
            //         console.log(`[OrderService.getOrderItemDetails] Found review for productId=${productId}`);
            //     }
            // }

            const orderItemDetails = {
                _id: item._id,
                orderId: item.orderId,
                productId: item.catalogItemId,
                displayOrderId: item.displayOrderId || item.orderId,
                name: item.name || (productData ? productData.name : 'Unknown Product'),
                brandName: productData ? (productData.brandName || CONSTANTS.BRAND_NAME) : CONSTANTS.BRAND_NAME,
                productImage: productData ? productData.mainMedia : '',
                price: item.price || 0,
                size: item.options && item.options.Size ? item.options.Size : 'N/A',
                quantity: item.quantity || 1,
                shipmentStatus: item.shipmentStatus || 'Processing',
                estimatedDeliveryDate: item.estimatedDeliveryDate || null,
                formattedDate: this._formatDate(orderResult.items[0]._createdDate),
                // Include shipping address data
                shippingAddress: item.shippingAddress || null,
                // review: review,
                render: []
            };

            console.log(`[OrderService.getOrderItemDetails] Successfully fetched details for orderId=${orderId}, productId=${productId}`);
            console.log(`[OrderService.getOrderItemDetails] Shipping address included:`, item.shippingAddress ? 'Yes' : 'No');

            return {
                success: true,
                metric_value: [orderItemDetails],
                context: {
                    type: "order_item_details",
                    orderId,
                    productId
                }
            };
        } catch (error) {
            console.error(`[OrderService.getOrderItemDetails] Exception:`, error);
            return {
                success: false,
                metric_value: [],
                error: 'Failed to retrieve order item details: ' + error.message,
                code: 'SERVER_ERROR',
                context: { type: "order_item_details", orderId, productId }
            };
        }
    }