export async function completeOrder(orderRecord, itemsToRemove) {
    console.log("Received Order Record:", orderRecord);
    console.log("Received Items to Remove:", itemsToRemove);
    try {
        const member = await currentMember.getMember();
        const userId = member ? member._id : null;
        orderRecord.userId = userId;

        // Calculate proportional discounts
        const totalMrp = orderRecord.products.reduce((sum, p) => sum + p.price * p.quantity, 0);
        const couponDiscount = orderRecord.couponDiscount || 0;
        const offerDiscount = orderRecord.offerDiscount || 0;

        // Ensure estimatedDeliveryDate is a Date object
        const estimatedDeliveryDate = orderRecord.estimatedDeliveryDate ? new Date(orderRecord.estimatedDeliveryDate) : null;

        // Create OrderItems records
        const orderItems = orderRecord.products.map(product => {
            const productMrp = product.price * product.quantity;
            const proportion = productMrp / totalMrp;
            const proportionalCouponDiscount = Math.round(couponDiscount * proportion * 100) / 100;
            const proportionalOfferDiscount = Math.round(offerDiscount * proportion * 100) / 100;
            const totalPrice = (product.price - (product.itemDiscount || 0) - proportionalCouponDiscount - proportionalOfferDiscount) * product.quantity;

            return {
                orderId: orderRecord._id,
                catalogItemId: product.catalogItemId,
                name: product.name,
                price: product.price,
                quantity: product.quantity,
                options: product.options,
                itemDiscount: product.itemDiscount || 0,
                proportionalCouponDiscount,
                proportionalOfferDiscount,
                totalPrice,
                image: product.image || '',
                shipmentStatus: 'Pending',
                returnStatus: 'NotRequested',
                refundAmount: 0,
                createdAt: new Date(),
                updatedAt: new Date(),
                shippingAddress: orderRecord.customerAddress,
                billingAddress: orderRecord.billingAddress,
                shippingMode: orderRecord.shippingMode || 'Surface',
                estimatedDeliveryDate: estimatedDeliveryDate
            };
        });

        // Insert OrderItems
        await Promise.all(orderItems.map(item => wixData.insert('OrderItems', item)));

        // Insert Orders record
        const orderToInsert = {
            ...orderRecord,
            shippingAddress: orderRecord.customerAddress,
            billingAddress: orderRecord.billingAddress,
            refundAmount: 0,
            lastUpdated: new Date(),
            shippingMode: orderRecord.shippingMode || 'Surface',
            estimatedDeliveryDate: estimatedDeliveryDate
        };
        await wixData.insert('Orders', orderToInsert);
        console.log("Order and OrderItems inserted successfully");

        // Remove items from cart
        const cart = await currentCart.getCurrentCart();
        if (cart && cart.lineItems && cart.lineItems.length > 0) {
            const uuidsToRemove = cart.lineItems
                .filter(item => itemsToRemove.some(toRemove =>
                    item.catalogReference.catalogItemId === toRemove.catalogItemId &&
                    JSON.stringify(item.catalogReference?.options?.options || {}) === JSON.stringify(toRemove.options)
                ))
                .map(item => item._id);
            if (uuidsToRemove.length > 0) {
                await currentCart.removeLineItemsFromCurrentCart(uuidsToRemove);
                console.log("Cart items removed:", uuidsToRemove);
            } else {
                console.warn("No matching items to remove:", itemsToRemove);
            }
        } else {
            console.warn("Cart is empty or not loaded. Skipping removal.");
        }

        return { success: true };
    } catch (error) {
        console.error("Error in completeOrder:", error);
        throw new Error("Failed to complete order: " + error.message);
    }
}