    async getUserOrderItems(userId, options = {}) {
        try {
            if (!userId) {
                console.error('[OrderService.getUserOrderItems] Error: User ID is required');
                return {
                    success: false,
                    metric_value: [],
                    error: 'User ID is required',
                    code: 'MISSING_USER_ID',
                    context: { type: "user_order_items" }
                };
            }

            const {
                limit = 5,
                    offset = 0,
                    sortBy = '_createdDate',
                    sortOrder = 'desc'
            } = options;

            console.log(`[OrderService.getUserOrderItems] Input: userId=${userId}, limit=${limit}, offset=${offset}`);

            // First, get user's orders to get orderIds
            const userOrdersResult = await wixData.query("Orders")
                .eq("userId", userId)
                .find();

            const userOrderIds = userOrdersResult.items.map(order => order._id);
            console.log(`[OrderService.getUserOrderItems] Found ${userOrderIds.length} orders for user`);

            if (userOrderIds.length === 0) {
                return {
                    success: true,
                    metric_value: [],
                    context: {
                        type: "user_order_items",
                        totalItems: 0,
                        totalAvailable: 0,
                        hasMore: false,
                        pagination: { limit, offset, total: 0, currentPage: Math.floor(offset / limit) + 1, totalPages: 0 }
                    }
                };
            }

            // Get total count
            let totalCountQuery = wixData.query("OrderItems");
            if (userOrderIds.length === 1) {
                totalCountQuery = totalCountQuery.eq("orderId", userOrderIds[0]);
            } else {
                totalCountQuery = totalCountQuery.hasSome("orderId", userOrderIds);
            }
            const totalCount = await totalCountQuery.count();
            console.log(`[OrderService.getUserOrderItems] Total OrderItems: ${totalCount}`);

            // DIRECT PAGINATION: Get OrderItems directly with database pagination
            // We'll join with Orders for sorting by order date
            let itemsQuery = wixData.query("OrderItems");
            if (userOrderIds.length === 1) {
                itemsQuery = itemsQuery.eq("orderId", userOrderIds[0]);
            } else {
                itemsQuery = itemsQuery.hasSome("orderId", userOrderIds);
            }

            // Sort by _createdDate on OrderItems (which should correlate with order date)
            if (sortOrder === 'desc') {
                itemsQuery = itemsQuery.descending('_createdDate');
            } else {
                itemsQuery = itemsQuery.ascending('_createdDate');
            }

            const itemsResult = await itemsQuery
                .skip(offset)
                .limit(limit)
                .find();

            console.log(`[OrderService.getUserOrderItems] Query returned ${itemsResult.items.length} items for offset=${offset}, limit=${limit}`);

            // Process items and format for frontend
            const processedItems = [];
            let idCounter = 1;

            for (const item of itemsResult.items) {
                const order = userOrdersResult.items.find(o => o._id === item.orderId);

                if (!order) {
                    console.log(`[OrderService.getUserOrderItems] Warning: No order found for orderId ${item.orderId}`);
                    continue;
                }

                let size = 'N/A';
                if (item.options && item.options.Size) {
                    size = item.options.Size;
                }

                const formattedDate = new Date(order._createdDate).toLocaleDateString('en-IN', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric'
                });

                const processedItem = {
                    _id: String(idCounter++),
                    originalItemId: item._id,
                    orderId: order._id,
                    price: item.price || 0,
                    size: size,
                    quantity: item.quantity || 1,
                    shipmentStatus: item.shipmentStatus || 'Processing',
                    estimatedDeliveryDate: item.estimatedDeliveryDate || null,
                    formattedDate: formattedDate,
                    catalogItemId: item.catalogItemId,
                    name: item.name,
                    options: item.options || {}
                };

                processedItems.push(processedItem);
            }

            console.log(`[OrderService.getUserOrderItems] Processed ${processedItems.length} items`);

            const hasMore = (offset + limit) < totalCount;
            const totalPages = Math.ceil(totalCount / limit);

            return {
                success: true,
                metric_value: processedItems,
                context: {
                    type: "user_order_items",
                    totalItems: processedItems.length,
                    totalAvailable: totalCount,
                    hasMore: hasMore,
                    pagination: {
                        limit,
                        offset,
                        total: totalCount,
                        currentPage: Math.floor(offset / limit) + 1,
                        totalPages: totalPages
                    }
                }
            };

        } catch (error) {
            console.error('[OrderService.getUserOrderItems] Exception:', error);
            return {
                success: false,
                metric_value: [],
                error: 'Failed to retrieve order items: ' + error.message,
                code: 'SERVER_ERROR',
                context: { type: "user_order_items" }
            };
        }
    }
