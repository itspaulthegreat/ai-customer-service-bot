import { fetch } from 'wix-fetch';
import wixSecretsBackend from 'wix-secrets-backend';
import { API_ENDPOINTS } from 'backend/Delhivery-api/delhivery_api_utils.js';
import {CONSTANTS} from 'public/constants.js'
const ORIGIN_PINCODE = CONSTANTS.DELHIVERY_CONSTANTS.ORIGIN_PINCODE
let ENVIRONMENT = "production"; // Change to "production" for live environment

function getApiUrl(API_NAME) {
    if (!API_ENDPOINTS[API_NAME]) {
        console.warn(`Unknown API name: ${API_NAME}`);
        return null;
    }
    return API_ENDPOINTS[API_NAME][ENVIRONMENT] || API_ENDPOINTS[API_NAME].staging;
}

const API_SECRET = ENVIRONMENT === 'production' ?
    'DELHIVERY_API_KEY' :
    'DELHIVERY_API_KEY_STAGE';

async function fetchTat(apiUrl, apiKey) {
    try {
        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Token ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error(`Delhivery API error: ${response.status} ${response.statusText}`);
            return null;
        }

        const data = await response.json();
        return data?.data || null;
    } catch (error) {
        console.error("Fetch error:", error);
        return null;
    }
}

export async function checkPincodeTAT(originPincode = ORIGIN_PINCODE, destinationPincode, mot = 'S', pdt = 'B2C', expectedPickupDate = null) {
    try {
        if (!originPincode || !/^[0-9]{6}$/.test(originPincode)) {
            return { success: false, error: "Invalid or missing origin pincode. Please provide a 6-digit pincode." };
        }
        if (!destinationPincode || !/^[0-9]{6}$/.test(destinationPincode)) {
            return { success: false, error: "Invalid or missing destination pincode. Please provide a 6-digit pincode." };
        }

        if (pdt && !['B2B', 'B2C'].includes(pdt)) {
            return { success: false, error: "Invalid product type. Use 'B2B' or 'B2C'." };
        }

        let apiKey;
        try {
            // Select API key based on ENVIRONMENT
            const secretName = API_SECRET
            apiKey = await wixSecretsBackend.getSecret(secretName);
            if (!apiKey) throw new Error("API key not found");
        } catch (error) {
            console.error("Failed to retrieve API key:", error);
            return { success: false, error: "Server configuration error. Please contact support." };
        }

        const baseUrl = getApiUrl('PINCONE_SERVICE');
        if (!baseUrl) {
            return { success: false, error: "Internal configuration error. API endpoint not found." };
        }

        const constructUrl = (mot) => {
            let url = `${baseUrl}?origin_pin=${originPincode}&destination_pin=${destinationPincode}&mot=${mot}`;
            if (pdt) url += `&pdt=${pdt}`;
            if (expectedPickupDate) url += `&expected_pickup_date=${expectedPickupDate}`;
            return url;
        };

        let results = {
            origin_pin: parseInt(originPincode),
            destination_pin: parseInt(destinationPincode)
        };

        if (mot === 'all') {
            const [sData, eData] = await Promise.all([
                fetchTat(constructUrl('S'), apiKey),
                fetchTat(constructUrl('E'), apiKey)
            ]);

            results.S_tat_days = sData?.tat || null;
            results.E_tat_days = eData?.tat || null;
            results.expected_delivery_date = sData?.expected_delivery_date || eData?.expected_delivery_date || null;
            results.message = (sData?.message || eData?.message || "TAT retrieved successfully");
        } else {
            const data = await fetchTat(constructUrl(mot), apiKey);
            if (!data) {
                return { success: false, error: "No TAT data returned from the API." };
            }
            results[`${mot}_tat_days`] = data.tat || null;
            results.expected_delivery_date = data.expected_delivery_date || null;
            results.message = data.message || "TAT retrieved successfully";
        }

        return { success: true, data: results };
    } catch (error) {
        console.error("Unexpected error in checkPincodeTAT:", error);
        return { success: false, error: "An unexpected error occurred. Please try again later." };
    }
}

// In backend/Delhivery-api/apiFetchCalls.jsw
// In backend/Delhivery-api/apiFetchCalls.jsw
export async function getShippingCost(destinationPincode, originPincode = ORIGIN_PINCODE, md = 'S', ss = 'Delivered', cgm = 200, pt = 'Pre-paid') {
    console.log("originPincode", originPincode);
    try {
        if (!originPincode || !/^[0-9]{6}$/.test(originPincode)) {
            throw new Error("Invalid or missing origin pincode.");
        }
        if (!destinationPincode || !/^[0-9]{6}$/.test(destinationPincode)) {
            throw new Error("Invalid or missing destination pincode.");
        }

        let apiKey;
        try {
            const secretName = API_SECRET;
            apiKey = await wixSecretsBackend.getSecret(secretName);
            if (!apiKey) throw new Error("API key not found");
        } catch (error) {
            console.error("Failed to retrieve API key:", error);
            return null;
        }

        const baseUrl = getApiUrl('SHIPPING_COST');
        if (!baseUrl) {
            return null;
        }

        const apiUrl = `${baseUrl}?md=${md}&ss=${ss}&d_pin=${destinationPincode}&o_pin=${originPincode}&cgm=${cgm}&pt=${pt}`;
        console.log("Fetching shipping cost from:", apiUrl);

        const response = await fetch(apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Token ${apiKey}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            console.error(`Delhivery API error: ${response.status} ${response.statusText}`);
            return null;
        }

        const data = await response.json();
        console.log(`Shipping cost response for mode ${md}, pt ${pt}:`, data);

        if (data.error) {
            console.error(`Delhivery API error response: ${data.error}`);
            return null;
        }

        const totalAmount = data?.[0]?.total_amount;
        if (typeof totalAmount !== 'number' || isNaN(totalAmount)) {
            console.error(`Invalid total_amount in response: ${totalAmount}`);
            return null;
        }

        // Return additional fields for COD
        return {
            totalAmount: totalAmount * 100,
            grossAmount: (data?.[0]?.gross_amount || totalAmount) * 100, // Fallback to total_amount if gross_amount is missing
            chargeCOD: (data?.[0]?.charge_COD || 0) * 100 // Default to 0 if charge_COD is missing
        };
    } catch (error) {
        console.error("Error in getShippingCost:", error);
        return null;
    }
}
export function dummygetApiUrl(PINCODE) {
    return PINCODE === '700051' ? 500 : null;
}