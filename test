import { Permissions, webMethod } from "wix-web-module";
import wixData from "wix-data";
import { CONSTANTS } from "public/constants";

export const submitReview = webMethod(Permissions.SiteMember, async (reviewData) => {
    try {
        const { userId, orderId, productId, reviewText, imageUrl, customerName } = reviewData;

        // Validate inputs
        if (!userId || !orderId || !productId) {
            throw new Error("Missing required fields: userId, orderId, or productId.");
        }

        if (reviewText && reviewText.length > CONSTANTS.REVIEWS.MAX_REVIEW_LENGTH) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_TEXT_TOO_LONG);
        }

        if (!reviewText && !imageUrl) {
            throw new Error("Must provide at least review text or image.");
        }

        // Validate order
        const orderResult = await wixData.query("Orders")
            .eq("_id", orderId)
            .eq("userId", userId)
            .eq("status", "Paid")
            .find();

        if (orderResult.items.length === 0) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_NO_ORDER);
        }

        const order = orderResult.items[0];
        const hasProduct = order.products.some(item => item.catalogItemId === productId);
        if (!hasProduct) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_NO_ORDER);
        }

        // Check shipment status
        const orderItemResult = await wixData.query(CONSTANTS.COLLECTIONS.ORDER_ITEMS)
            .eq("orderId", orderId)
            .eq("catalogItemId", productId)
            .eq("shipmentStatus", "Delivered")
            .find();

        if (orderItemResult.items.length === 0) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_NOT_DELIVERED);
        }

        // Check for existing review
        const existingReview = await wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("orderId", orderId)
            .eq("productId", productId)
            .find();

        if (existingReview.items.length > 0 && existingReview.items[0].status !== CONSTANTS.REVIEWS.STATUSES.REJECTED) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_ALREADY_SUBMITTED);
        }

        // Prepare review data (no rating)
        const review = {
            userId,
            orderId,
            productId,
            reviewText: reviewText || "",
            imageUrl: imageUrl || "",
            status: CONSTANTS.REVIEWS.STATUSES.PENDING,
            customerName: customerName || "Anonymous"
        };

        // Insert or update review, preserving rating if exists
        if (existingReview.items.length > 0) {
            review._id = existingReview.items[0]._id;
            if (existingReview.items[0].rating) {
                review.rating = existingReview.items[0].rating;
            }
            await wixData.update(CONSTANTS.COLLECTIONS.REVIEWS, review);
        } else {
            await wixData.insert(CONSTANTS.COLLECTIONS.REVIEWS, review);
        }

        return { success: true, message: "Review submitted successfully." };
    } catch (error) {
        console.error("Error submitting review:", error);
        return { success: false, message: error.message };
    }
});

export const submitRating = webMethod(Permissions.SiteMember, async (ratingData) => {
    try {
        const { userId, orderId, productId, rating } = ratingData;

        // Validate inputs
        if (!userId || !orderId || !productId) {
            throw new Error("Missing required fields: userId, orderId, or productId.");
        }

        if (typeof rating !== "number" || rating < CONSTANTS.REVIEWS.RATING_MIN || rating > CONSTANTS.REVIEWS.RATING_MAX) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_INVALID_RATING);
        }
        console.log("all data for rating submite",orderId,userId)
        // Validate order
        const orderResult = await wixData.query("Orders")
            .eq("_id", orderId)
            .eq("userId", userId)
            .eq("status", "Paid")
            .find();
    console.log("total order",orderResult)
        if (orderResult.items.length === 0) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_NO_ORDER);
        }

        const order = orderResult.items[0];
        const hasProduct = order.products.some(item => item.catalogItemId === productId);
        if (!hasProduct) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_NO_ORDER);
        }

        // Check shipment status
        const orderItemResult = await wixData.query(CONSTANTS.COLLECTIONS.ORDER_ITEMS)
            .eq("orderId", orderId)
            .eq("catalogItemId", productId)
            .eq("shipmentStatus", "Delivered")
            .find();

        if (orderItemResult.items.length === 0) {
            throw new Error(CONSTANTS.ERROR_MESSAGES.REVIEW_NOT_DELIVERED);
        }

        // Find existing review
        const existingReview = await wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("orderId", orderId)
            .eq("productId", productId)
            .find();

        let review;
        if (existingReview.items.length > 0) {
            review = existingReview.items[0];
            review.rating = rating;
            // Set status to approved only if no text or image
            if (!review.reviewText && !review.imageUrl) {
                review.status = CONSTANTS.REVIEWS.STATUSES.APPROVED;
            }
            // Otherwise, keep existing status (allows update without changing pending/rejected/approved)
            await wixData.update(CONSTANTS.COLLECTIONS.REVIEWS, review);
        } else {
            review = {
                userId,
                orderId,
                productId,
                rating,
                reviewText: "",
                imageUrl: "",
                status: CONSTANTS.REVIEWS.STATUSES.APPROVED,
                customerName: "Anonymous"
            };
            await wixData.insert(CONSTANTS.COLLECTIONS.REVIEWS, review);
        }

        return { success: true, message: "Rating submitted successfully." };
    } catch (error) {
        console.error("Error submitting rating:", error);
        return { success: false, message: error.message };
    }
});

export const checkReviewEligibility = webMethod(Permissions.SiteMember, async (userId, productId) => {
    try {
        // Check for paid orders
        const orderResult = await wixData.query("Orders")
            .eq("userId", userId)
            .eq("status", "Paid")
            .find();

        let matchingOrder = null;
        let deliveredItem = null;

        for (const order of orderResult.items) {
            if (order.products.some(item => item.catalogItemId === productId)) {
                const orderItemResult = await wixData.query(CONSTANTS.COLLECTIONS.ORDER_ITEMS)
                    .eq("orderId", order._id)
                    .eq("catalogItemId", productId)
                    .eq("shipmentStatus", "Delivered")
                    .find();

                if (orderItemResult.items.length > 0) {
                    matchingOrder = order;
                    deliveredItem = orderItemResult.items[0];
                    break;
                }
            }
        }

        if (!matchingOrder || !deliveredItem) {
            return { canReview: false, reviewStatus: null, orderId: null };
        }

        // Check for existing review
        const reviewResult = await wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("userId", userId)
            .eq("productId", productId)
            .eq("orderId", matchingOrder._id)
            .find();

        if (reviewResult.items.length > 0) {
            const review = reviewResult.items[0];
            return {
                canReview: review.status === CONSTANTS.REVIEWS.STATUSES.REJECTED,
                reviewStatus: review.status,
                orderId: matchingOrder._id
            };
        }

        return { canReview: true, reviewStatus: null, orderId: matchingOrder._id };
    } catch (error) {
        console.error("Error checking review eligibility:", error);
        return { canReview: false, reviewStatus: null, orderId: null };
    }
});

export const getRejectedReview = webMethod(Permissions.SiteMember, async (userId, productId, orderId) => {
    try {
        const reviewResult = await wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("userId", userId)
            .eq("productId", productId)
            .eq("orderId", orderId)
            .eq("status", CONSTANTS.REVIEWS.STATUSES.REJECTED)
            .find();

        if (reviewResult.items.length > 0) {
            return reviewResult.items[0];
        }
        return null;
    } catch (error) {
        console.error("Error fetching rejected review:", error);
        return null;
    }
});

export const getApprovedReviews = webMethod(Permissions.Anyone, async (productId, filter = "newest", limit = CONSTANTS.REVIEWS.PAGE_SIZE, skip = 0) => {
    try {
        let query = wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("productId", productId)
            .eq("status", CONSTANTS.REVIEWS.STATUSES.APPROVED)
            .limit(limit)
            .skip(skip);

        switch (filter) {
            case "highestRating":
                query = query.descending("rating").descending("_createdDate");
                break;
            case "lowestRating":
                query = query.ascending("rating").descending("_createdDate");
                break;
            case "newest":
                query = query.descending("_createdDate");
                break;
            case "oldest":
                query = query.ascending("_createdDate");
                break;
            default:
                query = query.descending("_createdDate");
        }

        const result = await query.find();
        return {
            reviews: result.items,
            hasNext: result.hasNext(),
            totalCount: result.totalCount
        };
    } catch (error) {
        console.error("Error fetching approved reviews:", error);
        return { reviews: [], hasNext: false, totalCount: 0 };
    }
});

export const getApprovedReviewsWithImages = webMethod(Permissions.Anyone, async (productId, filter = "newest", limit = CONSTANTS.REVIEWS.PAGE_SIZE, skip = 0) => {
    try {
        let query = wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("productId", productId)
            .eq("status", CONSTANTS.REVIEWS.STATUSES.APPROVED)
            .ne("imageUrl", "") // Only reviews with images
            .limit(limit)
            .skip(skip);

        switch (filter) {
            case "highestRating":
                query = query.descending("rating").descending("_createdDate");
                break;
            case "lowestRating":
                query = query.ascending("rating").descending("_createdDate");
                break;
            case "newest":
                query = query.descending("_createdDate");
                break;
            case "oldest":
                query = query.ascending("_createdDate");
                break;
            default:
                query = query.descending("_createdDate");
        }

        const result = await query.find();
        return {
            reviews: result.items,
            hasNext: result.hasNext(),
            totalCount: result.totalCount
        };
    } catch (error) {
        console.error("Error fetching approved reviews with images:", error);
        return { reviews: [], hasNext: false, totalCount: 0 };
    }
});

export const getUserProductOrderReview = webMethod(Permissions.SiteMember, async (userId, productId, orderId) => {
    try {
        const reviewResult = await wixData.query(CONSTANTS.COLLECTIONS.REVIEWS)
            .eq("userId", userId)
            .eq("productId", productId)
            .eq("orderId", orderId)
            .find();
        console.log("reviewResult",reviewResult)
        if (reviewResult.items.length > 0) {
            const review = reviewResult.items[0];
            return {
                success: true,
                review: {
                    rating: review.rating,
                    status: review.status,
                    reviewText: review.reviewText,
                    imageUrl: review.imageUrl,
                    customerName: review.customerName,
                    _id: review._id
                }
            };
        }
        return { success: true, review: null };
    } catch (error) {
        console.error("Error fetching user product order review:", error);
        return { success: false, review: null, message: error.message };
    }
});